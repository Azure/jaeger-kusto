name: master

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  golangci-lint:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    name: golangci-lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v1
        with:
          version: v1.26
  build:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    name: Build & Test
    runs-on: ubuntu-latest
    needs: golangci-lint
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.14
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Get dependencies
        run: |
          go get -v -t -d ./...
          if [ -f Gopkg.toml ]; then
              curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
              dep ensure
          fi

      - name: Build
        run: go build -v .

      - name: Calc coverage and test
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin   
          go test ./... -v -covermode=count -coverprofile=coverage.out

      - name: Convert coverage to lcov
        uses: jandelgado/gcov2lcov-action@v1.0.2
        with:
          infile: coverage.out
          outfile: coverage.lcov

      - name: Coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.github_token }}
          path-to-lcov: coverage.lcov

      - name: Upload binary
        uses: actions/upload-artifact@v1
        with:
          name: jaeger-kusto
          path: jaeger-kusto

  docker-push:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    name: Docker Push
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download binary
        uses: actions/download-artifact@v1
        with:
          name: jaeger-kusto

      - name: Build collector
        run: docker build . --file Dockerfile.collector --tag collector

      - name: Build image
        run: docker build . --file Dockerfile.query --tag query

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push images
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          echo VERSION=$VERSION

          docker tag collector docker.pkg.github.com/dodopizza/jaeger-kusto/collector:$VERSION
          docker tag query docker.pkg.github.com/dodopizza/jaeger-kusto/query:$VERSION
          docker push docker.pkg.github.com/dodopizza/jaeger-kusto/collector:$VERSION
          docker push docker.pkg.github.com/dodopizza/jaeger-kusto/query:$VERSION
